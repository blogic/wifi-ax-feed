From 4bc618fcdaea30fce6cffc1fbfa48de345ed67af Mon Sep 17 00:00:00 2001
From: John Crispin <john@phrozen.org>
Date: Thu, 18 Jun 2020 13:12:41 +0200
Subject: [PATCH 817/817] RNR: add reduced neighbor reporting

The Reduced Neighbor Report (RNR) element contains channel and other
information related to neighbor APs. It is part of the OCE requirement.

Signed-off-by: John Crispin <john@phrozen.org>
---
 hostapd/config_file.c        |  2 +
 hostapd/hostapd.conf         |  3 ++
 src/ap/ap_config.h           |  1 +
 src/ap/beacon.c              |  2 +
 src/ap/ieee802_11.c          | 89 ++++++++++++++++++++++++++++++++++++
 src/ap/ieee802_11.h          |  2 +
 src/common/ieee802_11_defs.h | 13 ++++++
 7 files changed, 112 insertions(+)

Index: hostapd-2020-06-08-5a8b3662/hostapd/config_file.c
===================================================================
--- hostapd-2020-06-08-5a8b3662.orig/hostapd/config_file.c
+++ hostapd-2020-06-08-5a8b3662/hostapd/config_file.c
@@ -4679,6 +4679,8 @@ static int hostapd_config_fill(struct ho
 		}
 		bss->mka_psk_set |= MKA_PSK_SET_CKN;
 #endif /* CONFIG_MACSEC */
+	} else if (os_strcmp(buf, "rnr_beacon") == 0) {
+		bss->rnr_beacon = atoi(pos);
 	} else {
 		wpa_printf(MSG_ERROR,
 			   "Line %d: unknown configuration item '%s'",
Index: hostapd-2020-06-08-5a8b3662/hostapd/hostapd.conf
===================================================================
--- hostapd-2020-06-08-5a8b3662.orig/hostapd/hostapd.conf
+++ hostapd-2020-06-08-5a8b3662/hostapd/hostapd.conf
@@ -2770,6 +2770,9 @@ own_ip_addr=127.0.0.1
 # that allows sending of such data. Default: 0.
 #stationary_ap=0
 
+# Enable reduced neighbour reporting (RNR)
+#rnr_beacon=0
+
 ##### Airtime policy configuration ###########################################
 
 # Set the airtime policy operating mode:
Index: hostapd-2020-06-08-5a8b3662/src/ap/ap_config.h
===================================================================
--- hostapd-2020-06-08-5a8b3662.orig/src/ap/ap_config.h
+++ hostapd-2020-06-08-5a8b3662/src/ap/ap_config.h
@@ -902,6 +902,7 @@ struct hostapd_bss_config {
 	struct ieee80211_he_mu_edca_parameter_set he_mu_edca;
 	struct spatial_reuse spr;
 #endif
+	u8 rnr_beacon;
 };
 
 /**
Index: hostapd-2020-06-08-5a8b3662/src/ap/beacon.c
===================================================================
--- hostapd-2020-06-08-5a8b3662.orig/src/ap/beacon.c
+++ hostapd-2020-06-08-5a8b3662/src/ap/beacon.c
@@ -1192,6 +1192,7 @@ int ieee802_11_build_ap_params(struct ho
 	tail_len += hostapd_mbo_ie_len(hapd);
 	tail_len += hostapd_eid_owe_trans_len(hapd);
 	tail_len += hostapd_eid_dpp_cc_len(hapd);
+	tail_len += hostapd_eid_reduced_neighbor_report_len(hapd);
 
 	tailpos = tail = os_malloc(tail_len);
 	if (head == NULL || tail == NULL) {
@@ -1364,6 +1365,7 @@ int ieee802_11_build_ap_params(struct ho
 	tailpos = hostapd_eid_owe_trans(hapd, tailpos,
 					tail + tail_len - tailpos);
 	tailpos = hostapd_eid_dpp_cc(hapd, tailpos, tail + tail_len - tailpos);
+	tailpos = hostapd_eid_reduced_neighbor_report(hapd, tailpos);
 
 	if (hapd->conf->vendor_elements) {
 		os_memcpy(tailpos, wpabuf_head(hapd->conf->vendor_elements),
Index: hostapd-2020-06-08-5a8b3662/src/ap/ieee802_11.c
===================================================================
--- hostapd-2020-06-08-5a8b3662.orig/src/ap/ieee802_11.c
+++ hostapd-2020-06-08-5a8b3662/src/ap/ieee802_11.c
@@ -5612,4 +5612,93 @@ void ieee802_11_rx_from_unknown(struct h
 }
 
 
+
+size_t hostapd_eid_reduced_neighbor_report_len(struct hostapd_data *hapd)
+{
+	size_t len = 0;
+
+	if (hapd->iface->num_bss > 1)
+		len += TBTT_HEADER_LENGTH + ((hapd->iface->num_bss - 1) * TBTT_INFO_LENGTH);
+	if (!dl_list_empty(&hapd->nr_db))
+		len += dl_list_len(&hapd->nr_db) * (TBTT_HEADER_LENGTH + TBTT_INFO_LENGTH);
+
+	return len;
+}
+
+
+u8 * hostapd_eid_reduced_neighbor_report(struct hostapd_data *hapd, u8 *eid)
+{
+	size_t len = hostapd_eid_reduced_neighbor_report_len(hapd);
+        struct hostapd_neighbor_entry *nr;
+	int i, count = 0;
+
+	if (!len)
+		return eid;
+
+	*eid++ = WLAN_EID_REDUCED_NEIGHBOR_REPORT;
+	*eid++ = len;
+
+	if (hapd->iface->num_bss > 1) {
+		u8 op_class, channel;
+
+		if (!(hapd->iface->drv_flags & WPA_DRIVER_FLAGS_AP_CSA) ||
+		    !hapd->iface->freq)
+			goto nr_db;
+
+		if (ieee80211_freq_to_channel_ext(hapd->iface->freq,
+						  hapd->iconf->secondary_channel,
+						  hostapd_get_oper_chwidth(hapd->iconf),
+						  &op_class, &channel) ==
+		    NUM_HOSTAPD_MODES)
+			goto nr_db;
+
+		*eid++ = TBTT_INFO_COUNT(hapd->iface->num_bss - 2);
+		*eid++ = TBTT_INFO_LENGTH;
+		*eid++ = op_class;
+		*eid++ = hapd->iconf->channel;
+		for (i = 0; i < hapd->iface->num_bss; i++) {
+			u8 bss_param = 0;
+
+			if (hapd->iface->bss[i] == hapd)
+				continue;
+			*eid++ = TBTT_AP_OFFSET_UNKNOWN;
+			os_memcpy(eid, hapd->iface->bss[i]->own_addr, ETH_ALEN);
+			eid += 6;
+			os_memcpy(eid, &hapd->iface->bss[i]->conf->ssid.short_ssid, 4);
+			eid += 4;
+			if (hapd->iface->bss[i]->conf->ssid.short_ssid ==
+			    hapd->conf->ssid.short_ssid)
+				bss_param |= TBTT_BSS_PARAM_SAME_SSID;
+			if (hapd->iconf->multiple_bssid)
+				bss_param |= TBTT_BSS_PARAM_MULTIPLE_BSSID;
+			*eid++ = bss_param;
+			count++;
+		}
+	}
+
+nr_db:
+	dl_list_for_each(nr, &hapd->nr_db, struct hostapd_neighbor_entry,
+			 list) {
+		if (!nr->nr || wpabuf_len(nr->nr) < 12)
+			continue;
+		if (nr->short_ssid == hapd->conf->ssid.short_ssid)
+			continue;
+		*eid++ = 0;
+		*eid++ = TBTT_INFO_LENGTH;
+		*eid++ = wpabuf_head_u8(nr->nr)[10];
+		*eid++ = wpabuf_head_u8(nr->nr)[11];
+		*eid++ = TBTT_AP_OFFSET_UNKNOWN;
+		os_memcpy(eid, nr->bssid, ETH_ALEN);
+		eid += 6;
+		os_memcpy(eid, &nr->short_ssid, 4);
+		eid += 4;
+		*eid++ = nr->bss_parameters;
+		count++;
+	}
+
+	if (!count)
+		eid -= 2;
+	return eid;
+}
+
 #endif /* CONFIG_NATIVE_WINDOWS */
Index: hostapd-2020-06-08-5a8b3662/src/ap/ieee802_11.h
===================================================================
--- hostapd-2020-06-08-5a8b3662.orig/src/ap/ieee802_11.h
+++ hostapd-2020-06-08-5a8b3662/src/ap/ieee802_11.h
@@ -120,6 +120,8 @@ u8 * hostapd_eid_time_zone(struct hostap
 int hostapd_update_time_adv(struct hostapd_data *hapd);
 void hostapd_client_poll_ok(struct hostapd_data *hapd, const u8 *addr);
 u8 * hostapd_eid_bss_max_idle_period(struct hostapd_data *hapd, u8 *eid);
+u8 * hostapd_eid_reduced_neighbor_report(struct hostapd_data *hapd, u8 *eid);
+size_t hostapd_eid_reduced_neighbor_report_len(struct hostapd_data *hapd);
 
 int auth_sae_init_committed(struct hostapd_data *hapd, struct sta_info *sta);
 #ifdef CONFIG_SAE
Index: hostapd-2020-06-08-5a8b3662/src/common/ieee802_11_defs.h
===================================================================
--- hostapd-2020-06-08-5a8b3662.orig/src/common/ieee802_11_defs.h
+++ hostapd-2020-06-08-5a8b3662/src/common/ieee802_11_defs.h
@@ -2333,4 +2333,17 @@ enum edmg_bw_config {
 /* DPP Public Action frame identifiers - OUI_WFA */
 #define DPP_OUI_TYPE 0x1A
 
+/* TBTT Information field defines */
+#define TBTT_HEADER_LENGTH			4
+#define TBTT_INFO_LENGTH			12
+#define TBTT_INFO_FILTERED_NEIGH_AP		BIT(2)
+#define TBTT_INFO_COUNT(x)			(((x) & 0xf) << 4)
+#define TBTT_AP_OFFSET_UNKNOWN			255
+#define TBTT_BSS_PARAM_OCT_RECOMMENDED		BIT(0)
+#define TBTT_BSS_PARAM_SAME_SSID		BIT(1)
+#define TBTT_BSS_PARAM_MULTIPLE_BSSID		BIT(2)
+#define TBTT_BSS_PARAM_TRANSMITTED_BSSID	BIT(3)
+#define TBTT_BSS_PARAM_CO_LOCATED_ESS		BIT(4)
+#define TBTT_BSS_PARAM_20_TU_PROBE_RESP_ACTIVE	BIT(5)
+
 #endif /* IEEE802_11_DEFS_H */
